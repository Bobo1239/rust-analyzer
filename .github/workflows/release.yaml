name: release
on:
  push:
    branches:
      - master

jobs:
  build-server:
    name: build-server
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      RUSTFLAGS: -D warnings
      CARGO_INCREMENTAL: 0
      RUSTUP_MAX_RETRIES: 10
      CARGO_NET_RETRY: 10
    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      # We need to disable the existing toolchain to avoid updating rust-docs
      # which takes a long time. The fastest way to do this is to rename the
      # existing folder, as deleting it takes about as much time as not doing
      # anything and just updating rust-docs.
#      - name: Rename existing rust toolchain (Windows)
#        if: matrix.os == 'windows-latest'
#        run: Rename-Item C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc C:\Users\runneradmin\.rustup\toolchains\stable-x86_64-pc-windows-msvc.old
#
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          target: x86_64-unknown-linux-musl
#          override: true

      - name: Build
        if: matrix.os == 'ubuntu-latest'
        run: mkdir -p ./target/x86_64-unknown-linux-musl/release && cp $(which pwd) ./target/x86_64-unknown-linux-musl/release/rust-analyzer
#        uses: actions-rs/cargo@v1
#        env:
#          CC: clang
#        with:
#          command: build
#          args: --package rust-analyzer --bin rust-analyzer --release --target x86_64-unknown-linux-musl

      - name: Build
        if: matrix.os != 'ubuntu-latest'
        shell: bash
        run: mkdir -p ./target/release && cp $(which ls) ./target/release/rust-analyzer
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --package rust-analyzer --bin rust-analyzer --release

      - name: Create distribution dir
        run: mkdir ./dist

      - name: Copy binary
        if: matrix.os == 'ubuntu-latest'
        run: cp ./target/x86_64-unknown-linux-musl/release/rust-analyzer ./dist/rust-analyzer-linux && strip ./dist/rust-analyzer-linux

      - name: Copy binary
        if: matrix.os == 'macos-latest'
        run: cp ./target/release/rust-analyzer ./dist/rust-analyzer-mac

      - name: Copy binary
        if: matrix.os == 'windows-latest'
        run: copy ./target/release/rust-analyzer.exe ./dist/rust-analyzer-windows.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: server-${{ matrix.os }}
          path: ./dist

  build-clients:
    name: build-clients
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: npm ci
        working-directory: ./editors/code

      - run: npm run package --scripts-prepend-node-path
        working-directory: ./editors/code

      - name: Copy vscode extension
        run: mkdir -p ./dist/code && cp ./editors/code/rust-analyzer.vsix ./dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: editor-plugins
          path: ./dist

  make-release:
    name: make-release
    runs-on: ubuntu-latest
    needs: ['build-server', 'build-clients']
    steps:
      - name: Install Nodejs
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - run: echo "::set-env name=TAG::$(date --iso)"
      - run: 'echo "TAG: $TAG"'

      - name: Checkout repository
        uses: actions/checkout@v1

      - uses: actions/download-artifact@v1
        with:
          name: editor-plugins
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: server-macos-latest
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: server-ubuntu-latest
          path: dist
      - uses: actions/download-artifact@v1
        with:
          name: server-windows-latest
          path: dist
      - run: ls -all ./dist

      - name: Publish Release
        uses: ./.github/actions/github-release
        with:
          files: "dist/*"
          name: ${{ env.TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

#      - run: npm ci
#        working-directory: ./editors/code
#
#      - name: Publish Extension
#        working-directory: ./editors/code
#        # token from https://dev.azure.com/rust-analyzer/
#        run: npx vsce publish 0.1.$(date +%Y%m%d) --pat ${{ secrets.MARKETPLACE_TOKEN }}
